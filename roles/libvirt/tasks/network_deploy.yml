---
############################################################
#  tasks file for crating virtual networks
############################################################
- name: Import network_check.yml
  import_tasks: 'network_check.yml'

- name: Create virtual networks
  vars:
    net_name: "{{ item.key }}"
    net_cidr: "{{ item.value.network_cidr }}"
    net_mode: "{{ item.value.mode }}"
  virt_net:
    command: define
    name: "{{ item.key }}"
    xml: "{{ lookup('template', 'virt-net.xml.j2') }}"
  when: item.key not in netlist.list_nets
  loop: "{{ virt_networks | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Virtual networks will be started at boot
  virt_net:
    autostart: 'yes'
    name: "{{ item.key }}"
  when: item.key not in netlist.list_nets
  loop: "{{ virt_networks | dict2items }}"
  loop_control:
    label: "{{ item.key }}"


- name: Run virtual networks
  virt_net:
    command: create
    name: "{{ item.key }}"
  when: item.key not in netlist.list_nets
  loop: "{{ virt_networks | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: List virtual networks after creation
  virt_net:
    command: list_nets
    name: unknown
  register: netlist

- name: Print active virtual networks after creation
  debug:
    var: netlist.list_nets

- name: Enable routing block
  block:

    - name: Enabling routing between two virtual networks
      vars:
        net1_name: "{{ item.value.net1 }}"
        net2_name: "{{ item.value.net2 }}"
      shell: |
        iptables -I FORWARD 1 -i "br-{{ net1_name[:10] }}" -o "br-{{ net2_name[:10] }}" -j ACCEPT
        iptables -I FORWARD 1 -i "br-{{ net2_name[:10] }}" -o "br-{{ net1_name[:10] }}" -j ACCEPT
      become: true
      when: (net1_name in netlist.list_nets) and
            (net2_name in netlist.list_nets)
      loop: "{{ routing_rools | dict2items }}"

  when: routing_rools is defined
