---
############################################################
# tasks file for creating instance of vm type
############################################################
- name: Set vm_name variable
  set_fact:
    vm_name: "{{ ii_vm.key }}-node{{ ii_index }}"

- name: Loop for volumes of vm instance
  include_tasks: vm_vol_loop_deploy.yml
  loop: "{{ ii_vm.value.volumes | dict2items }}"
  loop_control:
    loop_var: ii_vol
    label: "{{ ii_vol.key }}"

- name: Refresh storage pool list
  virt_pool:
    command: refresh
    name: "{{ vol_pool.name }}"

- name: Create vm block
  block:

    - name: Create vm
      vars:
        server_name: "{{ vm_name }}"
        vmtype_name: "{{ ii_vm.key }}"
        server_memory_usage: "{{ ii_vm.value.memory }}"
        server_cpu_usage: "{{ ii_vm.value.vcpu }}"
        volumes: "{{ ii_vm.value.volumes | kemopq.virtual_resources.volumes_to_list }}"
        interfaces: "{{ ii_vm.value.net_interfaces | kemopq.virtual_resources.netint_to_list }}"
        index: "{{ ii_index }}"
        uefi_loader_string: "<loader readonly='yes' type='pflash'>/usr/share/OVMF/OVMF_CODE.fd</loader>"
        uefi_nvram_string: "<nvram>/var/lib/libvirt/qemu/nvram/ubuntu18.04_VARS.fd</nvram>"
        uefi_loader: "{{ (ii_vm.value.boot_mode == 'uefi') | ternary(uefi_loader_string,'') }}"
        uefi_nvram: "{{ (ii_vm.value.boot_mode == 'uefi') | ternary(uefi_nvram_string,'') }}"
      virt:
        name: "{{ vm_name }}"
        command: define
        xml: "{{ lookup('template', 'vm-libvirt.xml.j2') }}"

    - name: Insert vm to /etc/host
      vars:
        index: "{{ ii_index - 1 }}"
      lineinfile:
        path: "/etc/hosts"
        regexp: "{{ vm_name }}"
        line: "{{ item.value.address_cidr | next_nth_usable(index | int) }} {{ vm_name }}"
      become: true
      when: (item.value.include_to_hosts is defined) and (item.value.include_to_hosts | bool) and
            (item.value.address_cidr is defined)
      loop: "{{ ii_vm.value.net_interfaces | dict2items }}"
      loop_control:
        label: "{{ item.key }}"

  when: (vm_name not in vm_list)
